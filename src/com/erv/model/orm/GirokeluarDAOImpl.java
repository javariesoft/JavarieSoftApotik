/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Tue Oct 28 06:21:30 ICT 2014
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */
package com.erv.model.orm;

import com.erv.db.hutangDao;
import com.erv.db.hutangbayarDao;
import com.erv.db.jurnalDao;
import com.erv.db.supplierDao;
import com.erv.exception.JavarieException;
import com.erv.function.PrintfFormat;
import com.erv.function.Util;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import com.erv.model.*;
import com.erv.model.dao.GirokeluarDAO;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class provides methods to populate DB Table of GIROKELUAR
 */
public class GirokeluarDAOImpl implements GirokeluarDAO {
    /* SQL to insert data */

    private Connection conn;
    private static final String SQL_INSERT
            = "INSERT INTO GIROKELUAR ("
            + "NOMORGIRO, TGLGIRO, TGLJTEMPO, JUMLAH, NAMAPENERIMA, STATUS, "
            + "KODESUPPLIER, IDBANK, BANKTUJUAN"
            + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT
            = "SELECT "
            + "ID, NOMORGIRO, TGLGIRO, TGLJTEMPO, JUMLAH, NAMAPENERIMA, STATUS, "
            + "KODESUPPLIER, IDBANK, BANKTUJUAN "
            + "FROM GIROKELUAR WHERE "
            + "ID = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE
            = "UPDATE GIROKELUAR SET "
            + "NOMORGIRO = ?, TGLGIRO = ?, TGLJTEMPO = ?, JUMLAH = ?, NAMAPENERIMA = ?, STATUS = ?, KODESUPPLIER = ?,  "
            + "IDBANK = ?, BANKTUJUAN = ? "
            + "WHERE "
            + "ID = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE
            = "DELETE FROM GIROKELUAR WHERE "
            + "ID = ?";

    /**
     * Create a new record in Database.
     *
     * @param bean The Object to be inserted.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public GirokeluarDAOImpl(Connection conn) {
        this.conn = conn;
    }

    public void create(Girokeluar bean) throws JavarieException {
        PreparedStatement ps = null;
        try {
            conn.createStatement().execute("set autocommit false");
            ps = conn.prepareStatement(SQL_INSERT);
            //ps.setInt(1, bean.getId());
            ps.setString(1, bean.getNomorgiro());
            if (bean.getTglgiro() != null) {
                ps.setDate(2, new java.sql.Date(bean.getTglgiro().getTime()));
            } else {
                ps.setNull(2, Types.DATE);
            }
            if (bean.getTgljtempo() != null) {
                ps.setDate(3, new java.sql.Date(bean.getTgljtempo().getTime()));
            } else {
                ps.setNull(3, Types.DATE);
            }
            ps.setDouble(4, bean.getJumlah());
            ps.setString(5, bean.getNamapenerima());
            ps.setInt(6, bean.getStatus());
            ps.setString(7, bean.getKodesupplier());
            ps.setString(8, bean.getIdbank());
            ps.setString(9, bean.getBanktujuan());
            ps.executeUpdate();
            ResultSet result = ps.getGeneratedKeys();
            if (result.next()) {
                bean.setId(result.getInt(1));
            }
            conn.commit();
        } catch (SQLException ex) {
            throw new JavarieException(ex.getMessage());
        } finally {
            try {
                conn.createStatement().execute("set autocommit true");
            } catch (SQLException ex) {
            }
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     *
     * @param beanKey The PK Object to be retrived.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public Girokeluar load(GirokeluarKey key) throws JavarieException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key.getId());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0) {
                return (Girokeluar) results.get(0);
            } else {
                return null;
            }
        } catch (SQLException ex) {
            throw new JavarieException(ex.getMessage());
        } finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     *
     * @param bean The Object to be saved.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public void update(Girokeluar bean) throws JavarieException {
        PreparedStatement ps = null;
        try {
            conn.createStatement().execute("set autocommit false");
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getNomorgiro());
            if (bean.getTglgiro() != null) {
                ps.setDate(2, new java.sql.Date(bean.getTglgiro().getTime()));
            } else {
                ps.setNull(2, Types.DATE);
            }
            if (bean.getTgljtempo() != null) {
                ps.setDate(3, new java.sql.Date(bean.getTgljtempo().getTime()));
            } else {
                ps.setNull(3, Types.DATE);
            }
            ps.setDouble(4, bean.getJumlah());
            ps.setString(5, bean.getNamapenerima());
            ps.setInt(6, bean.getStatus());
            ps.setString(7, bean.getKodesupplier());
            ps.setString(8, bean.getIdbank());
            ps.setString(9, bean.getBanktujuan());
            ps.setInt(10, bean.getId());
            ps.executeUpdate();
            conn.commit();
        } catch (SQLException ex) {
            try {
                conn.rollback();
            } catch (SQLException ex1) {

            }
            throw new JavarieException(ex.getMessage());
        } finally {
            try {
                conn.createStatement().execute("set autocommit true");
            } catch (SQLException ex) {
            }
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     *
     * @param bean The PK Object to be deleted.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public void delete(GirokeluarKey key) throws JavarieException {
        PreparedStatement ps = null;
        try {
            conn.createStatement().execute("set autocommit true");
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key.getId());
            ps.executeUpdate();
        } catch (SQLException ex) {
            throw new JavarieException(ex.getMessage());
        } finally {
            close(ps);
        }
    }

    /**
     * Populate the ResultSet.
     *
     * @param rs The ResultSet.
     * @return The Object to retrieve from DB.
     * @exception SQLException if something is wrong.
     */
    protected List<Girokeluar> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Girokeluar>();
        Girokeluar bean;
        while (rs.next()) {
            bean = new Girokeluar();
            bean.setId(rs.getInt("ID"));
            bean.setNomorgiro(rs.getString("NOMORGIRO"));
            bean.setTglgiro(rs.getDate("TGLGIRO"));
            bean.setTgljtempo(rs.getDate("TGLJTEMPO"));
            bean.setJumlah(rs.getDouble("JUMLAH"));
            bean.setNamapenerima(rs.getString("NAMAPENERIMA"));
            bean.setStatus(rs.getInt("STATUS"));
            bean.setKodesupplier(rs.getString("KODESUPPLIER"));
            bean.setIdbank(rs.getString("IDBANK"));
            bean.setBanktujuan(rs.getString("BANKTUJUAN"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     *
     * @param stmt Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     *
     * @param rs ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }

    public String getKodeGiroKeluar() throws JavarieException {
        String hasil = "";
        int jum = 1;
        String tgl = com.erv.function.Util.toDateStringSql(new java.util.Date());
        try {
            Statement stat = conn.createStatement();
            ResultSet rs = stat.executeQuery("select max(id) from GIROKELUAR where left(NOMORGIRO,2)='" + Util.getthn(tgl).substring(2, 4) + "'");
            if (rs.next()) {
                if (rs.getString(1) != null) {
                    jum = rs.getInt(1) + 1;
                }
            }
            hasil = (com.erv.function.Util.getthn(tgl).substring(2, 4) + ".GR" + new PrintfFormat("%04d").sprintf(jum));
            rs.close();
            stat.close();
        } catch (SQLException ex) {
            throw new JavarieException(ex.getMessage());
        }
        return hasil;
    }

    public List<Girokeluar> selectAll(String kriteria, int limit) throws JavarieException {
        PreparedStatement statement = null;
        List<Girokeluar> list = new ArrayList<Girokeluar>();
        String sql = "select * from girokeluar, supplier where girokeluar.KODESUPPLIER=supplier.IDSUPPLIER ";
        if (!kriteria.trim().equals("")) {
            sql += kriteria;
        }
        if (limit != 0) {
            sql += " limit " + limit;
        }
        try {
            statement = conn.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            Girokeluar bean;
            supplier supp;
            while (rs.next()) {
                bean = new Girokeluar();
                bean.setId(rs.getInt("ID"));
                bean.setNomorgiro(rs.getString("NOMORGIRO"));
                bean.setTglgiro(rs.getDate("TGLGIRO"));
                bean.setTgljtempo(rs.getDate("TGLJTEMPO"));
                bean.setJumlah(rs.getDouble("JUMLAH"));
                bean.setNamapenerima(rs.getString("NAMAPENERIMA"));
                bean.setStatus(rs.getInt("STATUS"));
                bean.setKodesupplier(rs.getString("KODESUPPLIER"));
                bean.setIdbank(rs.getString("IDBANK"));
                bean.setBanktujuan(rs.getString("BANKTUJUAN"));
                list.add(bean);
            }
            return list;
        } catch (SQLException e) {
            throw new JavarieException(e.getMessage());
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException ex) {
                }
            }
        }
    }

    public void angsuranHutang(Girokeluar girokeluar,String tglcair) throws JavarieException {
        Statement stat = null;
        Statement s = null;
        ResultSet rsHutang = null;
        try {
            String sql = "SELECT ID,KETERANGAN,NOFAKTUR,NOFAKTURSUPPLIER,JUMLAH,JUMLAH - JUMLAHBAYAR as SISA,JATUHTEMPO,STATUS from VIEW_HUTANG where IDSUPPLIER='" + girokeluar.getKodesupplier() + "' AND STATUS='BELUM LUNAS'";
            conn.setAutoCommit(true);
            stat = conn.createStatement();
            s = conn.createStatement();
            rsHutang = stat.executeQuery(sql);
            double totalGiro = girokeluar.getJumlah();
            hutangbayar pb;
            jurnal jn;
            boolean ada = false;
            while (rsHutang.next()) {
                ada = true;
                if (totalGiro >= rsHutang.getDouble(5)) {
                    pb = new hutangbayar();
                    pb.setID(hutangbayarDao.getID(conn));
                    pb.setIDHUTANG(rsHutang.getInt(1));
                    pb.setJUMLAH(rsHutang.getDouble(5));
                    pb.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(conn));
                    pb.setREF(girokeluar.getNomorgiro());
                    pb.setTANGGAL(tglcair);
                    hutangbayarDao.insertIntoHUTANGBAYAR(conn, pb);
                    totalGiro -= rsHutang.getDouble(5);
                    hutang p = hutangDao.getDetails(conn, rsHutang.getInt(1));
                    p.setSTATUS("0");
                    hutangDao.updateHUTANG(conn, p.getID(), p);
                } else {
                    pb = new hutangbayar();
                    pb.setID(hutangbayarDao.getID(conn));
                    pb.setIDHUTANG(rsHutang.getInt(1));
                    pb.setJUMLAH(totalGiro);
                    pb.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(conn));
                    pb.setREF(girokeluar.getNomorgiro());
                    pb.setTANGGAL(tglcair);
                    hutangbayarDao.insertIntoHUTANGBAYAR(conn, pb);
                    totalGiro = 0;
                    break;
                }

            }
            if (ada) {
                jn = new jurnal();
                jn.setID(jurnalDao.getIDJurnal(conn));
                jn.setKODEJURNAL(girokeluar.getNomorgiro());
                jn.setTANGGAL(tglcair);
                jn.setDESKRIPSI("Bayar Hutang Kpd " + supplierDao.getDetails(conn, girokeluar.getKodesupplier()).getNAMA() + " Via Giro No "+girokeluar.getNomorgiro());
                jurnalDao.insertIntoJURNAL(conn, jn);
                s.execute("insert into RINCIJURNAL values(" + jn.getID() + ",'" + supplierDao.getDetails(conn, girokeluar.getKodesupplier()).getKODEAKUN() + "'," + girokeluar.getJumlah() + ",0,1,'')");
                s.execute("insert into RINCIJURNAL values(" + jn.getID() + ",'" + girokeluar.getIdbank() + "',0," + girokeluar.getJumlah() + ",2,'')");
                conn.commit();
                girokeluar.setStatus(1);
                update(girokeluar);
            } else {
                throw new JavarieException("Hutang Tidak Ada");
            }
        } catch (SQLException ex) {
            try {
                conn.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(GirokeluarDAOImpl.class.getName()).log(Level.SEVERE, null, ex1);
            }
            throw new JavarieException(ex.getMessage());
        } finally {
            try {
                conn.setAutoCommit(true);
            } catch (SQLException ex) {
                Logger.getLogger(GirokeluarDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (rsHutang != null) {
                try {
                    rsHutang.close();
                } catch (SQLException ex) {
                }
            }
            if (stat != null) {
                try {
                    stat.close();
                } catch (SQLException ex) {
                }
            }
            if (s != null) {
                try {
                    s.close();
                } catch (SQLException ex) {
                }
            }

        }
    }

}
